import { Module, NestModule } from '@nestjs/common'
import { ScheduleModule } from '@nestjs/schedule'
<% if (database === DATABASE.TYPEORM) { %>import { TypeOrmModule } from '@nestjs/typeorm'<% } %>
<% if (database === DATABASE.MONGOOSE) { %>import { MongooseModule } from '@nestjs/mongoose'<% } %>

import * as tasks from './modules'
<% if (database !== DATABASE.NONE) { %>import { getDatabaseOptions } from '<%- orm.importPath -%>'<% } %>
import { ConfigService } from '@webundsoehne/nestjs-util'
<% if (microserviceProvider) { %>import { MicroserviceProviderModule } from '@webundsoehne/nestjs-util-microservices'<% } -%>

/**
 * Register all services under providers
 */
<% if (database !== DATABASE.NONE) { %>export function createTaskModule (mock = false): new(mock: boolean) => NestModule {
<% } else { -%>export function createTaskModule (): new() => NestModule { <% } %>
  @Module({
    providers: [
      ConfigService
    ],
    imports: [
      ScheduleModule.forRoot(),
      <% if (database === DATABASE.TYPEORM) { %>TypeOrmModule.forRoot(getDatabaseOptions(mock)),<% } -%>
      <% if (database === DATABASE.MONGOOSE) { %>MongooseModule.forRoot(getDatabaseOptions(mock)),<% } -%>
      <% if (microserviceProvider) { %>MicroserviceProviderModule.forRoot({ queue: [] }),<% } -%>
      ...Object.values(tasks)
      ]
  })
  class TaskModule implements NestModule {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async configure (): Promise<any> {}
  }

  return TaskModule
}
