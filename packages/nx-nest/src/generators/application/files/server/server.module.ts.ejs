import { MiddlewareConsumer, Module, NestModule, RequestMethod } from '@nestjs/common'
import { APP_FILTER, APP_INTERCEPTOR, APP_PIPE } from '@nestjs/core'
<% if (databaseOrm === DATABASE_ORM.TYPEORM) { %>import { TypeOrmModule } from '@nestjs/typeorm'<% } %>
<% if (databaseOrm === DATABASE_ORM.MONGOOSE) { %>import { MongooseModule } from '@nestjs/mongoose'<% } %>

import * as modules from './modules'
<% if (databaseOrm !== DATABASE_ORM.NONE) { %>import { getDatabaseOptions } from '<%- orm.importPath -%>'<% } %>
import {
  ConfigService,
  BadRequestExceptionFilter,
  GlobalExceptionFilter,
  MaintenanceMiddleware,
  MaintenanceModule,
  SetApiInfoHeaderMiddleware,
  setEnvironmentVariables,
  ExtendedValidationPipe
} from '@webundsoehne/nestjs-util'
import {
  CacheLifetimeHelperInterceptor,
  InternalModule,
  RequestProfilerInterceptor,
} from '@webundsoehne/nestjs-util-restful'
<% if (microserviceProvider) { %>import { MicroserviceProviderModule } from '@webundsoehne/nestjs-util-microservices'<% } -%>

export function createServerModule (): new() => NestModule {
  @Module({
    providers: [
      ConfigService,
      {
        provide: APP_FILTER,
        useClass: GlobalExceptionFilter
      },
      {
        provide: APP_FILTER,
        useClass: BadRequestExceptionFilter
      },
      {
        provide: APP_PIPE,
        useClass: ExtendedValidationPipe
      },
      {
        provide: APP_INTERCEPTOR,
        useClass: CacheLifetimeHelperInterceptor
      },
      {
        provide: APP_INTERCEPTOR,
        useClass: RequestProfilerInterceptor
      }
    ],
    imports: [
      <% if (databaseOrm === DATABASE_ORM.TYPEORM) { %>TypeOrmModule.forRoot(getDatabaseOptions()),<% } -%>
      <% if (databaseOrm === DATABASE_ORM.MONGOOSE) { %>MongooseModule.forRoot(...getDatabaseOptions()),<% } -%>
      <% if (microserviceProvider) { %>MicroserviceProviderModule.forRoot({ queue: [] }),<% } -%>
      InternalModule,
      MaintenanceModule,
      ...Object.values(modules)
      ]
  })
  class ServerModule implements NestModule {
    async configure (consumer: MiddlewareConsumer): Promise<void> {
      await setEnvironmentVariables()

      consumer
        .apply(MaintenanceMiddleware, SetApiInfoHeaderMiddleware)
        .forRoutes({ path: '(.*)', method: RequestMethod.ALL })
    }
  }

  return ServerModule
}
