import { Module, NestModule, ClassSerializerInterceptor } from '@nestjs/common'
import { APP_FILTER, APP_PIPE, APP_INTERCEPTOR } from '@nestjs/core'
<% if (databaseOrm === DATABASE_ORM.TYPEORM) { %>import { TypeOrmModule } from '@nestjs/typeorm'<% } %>
<% if (databaseOrm === DATABASE_ORM.MONGOOSE) { %>import { MongooseModule } from '@nestjs/mongoose'<% } %>

import * as modules from './modules'
<% if (databaseOrm !== DATABASE_ORM.NONE) { %>import { getDatabaseOptions } from '<%- orm.importPath -%>'<% } %>
import { ConfigService, GlobalExceptionFilter, ExtendedValidationPipe } from '@webundsoehne/nestjs-util'
import { <% if (microserviceProvider) { %>MicroserviceProviderModule, <% } %>RpcGlobalExceptionFilter } from '@webundsoehne/nestjs-util-microservices'

<% if (databaseOrm !== DATABASE_ORM.NONE) { %>export function createMicroserviceModule (mock = false): new(mock: boolean) => NestModule {
<% } else { -%>export function createMicroserviceModule (): new() => NestModule {<% } %>
  @Module({
    providers: [
      ConfigService,
      {
        provide: APP_PIPE,
        useClass: ExtendedValidationPipe
      },
      {
        provide: APP_INTERCEPTOR,
        useClass: ClassSerializerInterceptor
      },
      {
        provide: APP_FILTER,
        useClass: GlobalExceptionFilter
      },
      {
        provide: APP_FILTER,
        useClass: RpcGlobalExceptionFilter
      }
    ],
    imports: [
      <% if (databaseOrm === DATABASE_ORM.TYPEORM) { %>TypeOrmModule.forRoot(getDatabaseOptions(mock)),<% } -%>
      <% if (databaseOrm === DATABASE_ORM.MONGOOSE) { %>MongooseModule.forRoot(getDatabaseOptions(mock)),<% } -%>
      <% if (microserviceProvider) { %>MicroserviceProviderModule.forRoot({ queue: [] }),<% } -%>
      ...Object.values(modules)
    ]
  })
  class MicroservicesModule implements NestModule {
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async configure (): Promise<any> {}
  }

  return MicroservicesModule
}
